# Create the YAML configuration file
# On a regular machine, you can create it manually or with nano
# Note here we are using some smaller values because the dataset is small
# For larger datasets, consider increasing: train_steps, valid_steps, warmup_steps, save_checkpoint_steps, keep_checkpoint

decoder_start_token: '</s>'
update_vocab: true
train_from: "/root/zindi-nmt/models/nllb-200-600M-onmt.pt"
average_decay: 0.0005
prefetch_factor: 2
share_decoder_embeddings: true
share_embeddings: true
position_encoding: true
position_encoding_type: 'SinusoidalConcat'

# Use standard scaled dot-product attention
self_attn_type: scaled-dot

## Where the samples will be written
save_data: "/root/zindi-nmt/train/"

# Training files
data:
    corpus_1:
        path_src: "/root/zindi-nmt/data/master_train_dyu.txt-filtered.dyu"
        path_tgt: "/root/zindi-nmt/data/master_train_fra.txt-filtered.fra"
        transforms: [sentencepiece, prefix, suffix, filtertoolong]
        src_prefix: "dyu_Latn"
        tgt_prefix: "fra_Latn"
        src_suffix: "</s>"
        tgt_suffix: ""
    valid:
        path_src: "/root/zindi-nmt/data/dyu_val_V1.txt-filtered.dyu"
        path_tgt: "/root/zindi-nmt/data/data/fra_val_V1.txt-filtered.fra"
        transforms: [sentencepiece, prefix, suffix, filtertoolong]
        src_prefix: "dyu_Latn"
        tgt_prefix: "fra_Latn"
        src_suffix: "</s>"
        tgt_suffix: ""

# Vocabulary files, generated by onmt_build_vocab
src_vocab: models/source.vocab
tgt_vocab: models/target.vocab

# Vocabulary size - should be the same as in sentence piece
src_vocab_size: 50000
tgt_vocab_size: 50000

# Filter out source/target longer than n if [filtertoolong] enabled
src_seq_length: 150
src_seq_length: 150

# Tokenization options
src_subword_model: models/source.model
tgt_subword_model: models/target.model

# Where to save the log file and the output models/checkpoints
log_file: "/root/zindi-nmt/logs/trainnllb-zindi_V30.log"
save_model: "/root/zindi-nmt/models/nllb-zindi_V30"

# Stop training if it does not imporve after n validations
early_stopping: 10

# Default: 5000 - Save a model checkpoint for each n
save_checkpoint_steps: 250

# To save space, limit checkpoints to last n
keep_checkpoint: 3

seed: 3435

# Default: 100000 - Train the model to max n steps 
# Increase to 200000 or more for large datasets
# For fine-tuning, add up the required steps to the original steps
train_steps: 10000

# Default: 10000 - Run validation after n steps
valid_steps: 50

# Default: 4000 - for large datasets, try up to 8000
warmup_steps: 50
report_every: 10

# Number of GPUs, and IDs of GPUs
world_size: 1
gpu_ranks: [0]

# Batching
bucket_size: 262144
num_workers: 4  # Default: 2, set to 0 when RAM out of memory
batch_type: "tokens"
batch_size: 4096   # Tokens per batch, change when CUDA out of memory
valid_batch_size: 2048
max_generator_batches: 2
accum_count: [4]
accum_steps: [0]

# Optimization
model_dtype: "fp16"
optim: "adam"
learning_rate: 2
decay_method: "noam"
adam_beta2: 0.998
max_grad_norm: 0
label_smoothing: 0.1
param_init: 0
param_init_glorot: true
normalization: "tokens"

# Model
encoder_type: transformer
decoder_type: transformer
position_encoding: true
enc_layers: 6
dec_layers: 6
heads: 8
hidden_size: 512
word_vec_size: 512
transformer_ff: 2048
dropout_steps: [0]
dropout: [0.1]
attention_dropout: [0.1]
